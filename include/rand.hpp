/**
 * \file rand.hpp
 * \copyright The 3-clause BSD license is applied to this software.
 * \author Florent Hédin
 * \author Tony Lelièvre
 * \author École des Ponts - ParisTech
 * \date 2016-2019
 */

#ifndef RAND_HPP_INCLUDED
#define RAND_HPP_INCLUDED

#include "global.hpp"
#include <string>

/**
* @brief Used to indicate if the random seeds used for initialising the random number generators should be read from or written to a file (for reproducibility).
* See init_rand(...) which uses it.
*/
enum SEEDS_IO
{
  NONE = 0, ///< No I/O of the seeds
  SAVE_TO_FILE   = 1, ///< seeds from all ranks will be saved to a unique binary file
  LOAD_FROM_FILE = 2, ///< seeds for  all ranks will be read from  a unique binary file
};

/**
 * @brief Call this function for initialising a Mersenne twister 19937 random numbers generator, using random seeds.
 * 
 * The generator is by default seeded using integers taken from a std::random_device (usually by reading /dev/urandom where available, or using the hardware instruction RDRND on compatible CPUs).
 * Furthermore the seeds obtained from a std::random_device can be saved to a file for later re-use.
 *
 * If you load a seed file generated by this function during a previous run, you will get the same initialization and should be able to reproduce results (at least if runing on the same architecture and using the same compiler...).
 * 
 * The file should contain exactly NRANKS*512 unsigned 32 bits integers (uint32_t), where NRANKS is the number of MPI ranks running, i.e. each ranks requires 512 uint32_t for seeding
 * its Mersenne twister 19937 engine.
 * 
 * If you want to visualize as text the binary seed file "seeds.bin", use the following unix command : "od -A n -t u4 seeds.bin"
 * 
 * 
 * @param io_type Set to either SEEDS_IO::NONE, SEEDS_IO::LOAD_FROM_FILE or SEEDS_IO::SAVE_TO_FILE. ; the first only generates seeds for internal use, the second will load seeds from file seeds_file_name, and the third will save the seeds internally generated to file seeds_file_name.
 * @param seeds_file_name if io_type is not SEEDS_IO::NONE, this should contain a valide path/filename from which to load the seeds or where to write the seeds. Defaults to NULLFILE.
 */
void init_rand(SEEDS_IO io_type,
               const std::string& seeds_file_name = NULLFILE);

/**
 * @brief Call this function for obtaining a uniformly distributed random number in the range [0.0,1.0]
 *
 * @return A random number uniformly distributed in the range [0.0,1.0]
 */
double get_double_unif_0_1();

/**
 * @brief Call this function for obtaining a uniformly distributed random number in the range [-1.0,1.0]
 *
 * @return A random number uniformly distributed in the range [-1.0,1.0]
 */
double get_double_unif_m1_p1();

/**
 * @brief Call this function for obtaining a normally distributed random number (mean = 0.0 | sd = 1.0)
 *
 * @return A random number normally distributed (mean = 0.0 | sd = 1.0)
 */
double get_double_normal_0_1();

/**
 * @brief Call this for obtaining a random unsigned 32 bits integer
 * 
 * @return a random unsigned 32 bits integer between 0 and UINT32_MAX
 */
uint32_t get_uint32();

/**
 * @brief Call this for obtaining a random signed 32 bits integer
 * 
 * @return a random signed 32 bits integer between INT32_MIN and INT32_MAX
 */
int32_t  get_int32();

/**
 * @brief Returns an unsigned int within [min;max] (like a dice roll)
 * 
 * @param min lower bound of random range
 * @param max upper bound of random range
 * 
 * @return a random unsigned 32 bits integer between min and max
 */
int32_t get_int32_min_max(const int32_t min, const int32_t max);

#endif // RAND_HPP_INCLUDED
